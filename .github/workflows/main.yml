name: CI/CD master

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'

jobs:
  initial:
    name: Initializing
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        go-version: ['1.18.x', '1.19.x', '1.20.x']
        platform: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Go modules Cache
        uses: actions/cache@v3
        id: go-cache
        with:
          path: ~/go/pkg/mod
          #key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - if: steps.go-cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Install SWAGGER
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Update SWAGGER
        working-directory: ./app
        run: swag init

      - name: Test
        run: go test -v -coverprofile=profile.cov -race ./...

      - name: Send goveralls coverage
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: profile.cov
          flag-name: Go-${{ matrix.go }}
          parallel: true

      - name: Build
        working-directory: ./app
        run: go build -v -o app-${{ matrix.go-version }}

      - name: Upload Build results
        uses: actions/upload-artifact@v3
        with:
          name: Go-results-${{ matrix.go-version }}
          path: ./app/app-${{ matrix.go-version }}

  check-coverage:
    name: Check coverage
    needs: [initial]
    runs-on: ubuntu-latest
    steps:
      - uses: shogo82148/actions-goveralls@v1
        with:
          parallel-finished: true

  docker-check-vulnerabilities:
    runs-on: ubuntu-latest
    needs: initial
    steps:
      - uses: actions/checkout@v3

      - name: Checkov Dockerfile Scan
        uses: bridgecrewio/checkov-action@v12.2445.0
        with:
          directory: .
          framework: dockerfile

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  Docker:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: docker-check-vulnerabilities
    steps:
      - uses: actions/checkout@v3

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: Go-results-1.19.x

      - shell: bash
        run: |
          mv app-1.19.x albums

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: arturmon/albums:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Deploy:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    environment: ${{ vars.ENVIRONMENT_STAGE }}
    needs: Docker
    steps:
      - name: Deploy to Staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.REMOTE_HOST }}
          port: 22
          username: ${{ secrets.REMOTE_USER }}
          script: |
            echo "======VERSION======"
            podman version
            echo "======INFO========="
            podman info
            echo "======DEPLOY======="
            # Check if the PostgreSQL server container is already running
            if podman ps -a --filter "name=postgresql-server" --format "{{.Names}}" | grep -q "postgresql-server"; then
              echo "PostgreSQL server container is already running. Perform nothing operation."
            else
              echo "Deploying PostgreSQL server container..."
              podman run -d -p 5432:5432 --privileged --name postgresql-server \
              -e POSTGRESQL_PASSWORD="${{ secrets.POSTGRESQL_PASSWORD }}" \
              docker.io/bitnami/postgresql:latest
            fi
            echo "Delete old albums container..."
            podman stop albums
            podman rm albums
            echo "Deploying albums container..."
            podman run -d --privileged --name albums docker.io/arturmon/albums:latest