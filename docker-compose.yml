version: '3.5'
services:
  postgresql:
    container_name: postgres
    image: bitnami/postgresql:latest
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_USERNAME=root
      - POSTGRESQL_PASSWORD=1qazxsw2
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_DATABASE=db_issue_album
      - POSTGRESQL_CLIENT_MIN_MESSAGES=notice

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    restart: unless-stopped
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://root:1qazxsw2@postgres:5432/postgres?sslmode=disable"
    depends_on:
      - postgresql

  redis:
    container_name: caching
    image: bitnami/redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=redis

  memcache:
    container_name: memcache
    image: bitnami/memcached:latest

  mongodb:
    container_name: mongo-db
    image: bitnami/mongodb:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/bitnami/mongodb
    environment:
      - MONGODB_ROOT_PASSWORD=1qazxsw2
      - MONGODB_USERNAME=root
      - MONGODB_PASSWORD=1qazxsw2
      - MONGODB_DATABASE=db_issue_album

  rabbitmq:
    container_name: rabbit
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - ./infra/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./infra/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro

  minio:
    container_name: minio-server
    image: bitnami/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
      - MINIO_DEFAULT_BUCKETS=music-bucket:none
      - MINIO_BROWSER=on
      - CONSOLE_SECURE_TLS_REDIRECT=off
      - MINIO_NOTIFY_AMQP_ENABLE=on
      - MINIO_NOTIFY_AMQP_URL=amqp://guest:guest@rabbit:5672
      - MINIO_NOTIFY_AMQP_EXCHANGE=s3_exchange
      - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE=fanout
      - MINIO_NOTIFY_AMQP_DURABLE=on
      - MINIO_NOTIFY_AMQP_DELIVERY_MODE=2
    volumes:
      - /home/amudrykh/minio_data:/data
    depends_on:
      - rabbitmq

  minio-mc:
    container_name: minio-mc
    image: bitnami/minio-client:latest
    environment:
      - MINIO_SERVER_HOST=minio-server
      - MINIO_SERVER_ACCESS_KEY=admin
      - MINIO_SERVER_SECRET_KEY=12345678
    entrypoint: >
      /bin/sh -c "
      mc config host add myminio http://minio-server:9000 admin 12345678;
      mc mb myminio/music-bucket;
      mc version enable myminio/music-bucket;
      mc event add myminio/music-bucket arn:minio:sqs:us-east-1:_:amqp;
      mc admin user add myminio app E7ct9Zr1rOu0ZJZLxTqv;
      mc admin policy create myminio MusicPolicy /tmp/listMusicBucket.json;
      mc admin policy attach myminio MusicPolicy --user app;
      "
    volumes:
      - ./infra/minio/listMusicBucket.json:/tmp/listMusicBucket.json:ro
    depends_on:
      - minio

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./infra/grafana:/etc/grafana/provisioning/datasources
      - ./infra/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    volumes:
      - /infra/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      - PROMETHEUS_QUERY_NAMESPACE=spanmetrics
      - PROMETHEUS_QUERY_DURATION_UNIT=s
    ports:
      - "4317:4317"
      - "4318:4318"
      - "14268:14268"

  weavescope:
    image: weaveworks/scope:latest
    container_name: weavescope
    hostname: weavescope
    pid: "host"
    privileged: true
    ports:
      - "4040:4040"
    labels:
      - "works.weave.role=system"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    command:
      - "--probe.docker=true"
      - "--weave=false"

  consul:
    image: hashicorp/consul:1.18.0
    restart: unless-stopped
    volumes:
      - ./infra/consul/server.json:/consul/config/server.json:ro
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "agent"

  consul-exporter:
    image: prom/consul-exporter:v0.11.0
    command: --consul.server=consul:8500
    restart: unless-stopped
    ports:
      - "9107:9107"

  test-app-1:
    environment:
      - S3_ACCESS_KEY_ID=app
      - S3_SECRET_ACCESS_KEY=E7ct9Zr1rOu0ZJZLxTqv
      - STORAGE_HOST=postgres
      - SESSION_POSTGRESQL_HOST=postgres
      - S3_ENDPOINT=minio-server:9000
      - MQ_BROKER=rabbit
      - CONSUL_URL=consul:8500
      - LOG_TYPE=gelf
      - LOG_GELF_SERVER_URL=graylog:12201
      - OPEN_TELEMETRY_JAEGER_ENDPOINT=http://jaeger:4318
      - CACHING_ENABLED=true
      - CACHING_ADDRESS=caching:6379
      - CACHING_PASSWORD-redis
      - CACHING_EXPIRATION=2
    image: arturmon/s3stream:latest
    restart: unless-stopped


  test-app-2:
    environment:
      - S3_ACCESS_KEY_ID=app
      - S3_SECRET_ACCESS_KEY=E7ct9Zr1rOu0ZJZLxTqv
      - STORAGE_HOST=postgres
      - SESSION_POSTGRESQL_HOST=postgres
      - S3_ENDPOINT=minio-server:9000
      - MQ_BROKER=rabbit
      - CONSUL_URL=consul:8500
      - LOG_TYPE=gelf
      - LOG_GELF_SERVER_URL=graylog:12201
      - OPEN_TELEMETRY_JAEGER_ENDPOINT=http://jaeger:4318
      - CACHING_ENABLED=true
      - CACHING_ADDRESS=caching:6379
      - CACHING_PASSWORD-redis
      - CACHING_EXPIRATION=2
    image: arturmon/s3stream:latest
    restart: unless-stopped

  test-app-3:
    environment:
      - S3_ACCESS_KEY_ID=app
      - S3_SECRET_ACCESS_KEY=E7ct9Zr1rOu0ZJZLxTqv
      - STORAGE_HOST=postgres
      - SESSION_POSTGRESQL_HOST=postgres
      - S3_ENDPOINT=minio-server:9000
      - MQ_BROKER=rabbit
      - CONSUL_URL=consul:8500
      - LOG_TYPE=gelf
      - LOG_GELF_SERVER_URL=graylog:12201
      - OPEN_TELEMETRY_JAEGER_ENDPOINT=http://jaeger:4318
      - CACHING_ENABLED=true
      - CACHING_ADDRESS=caching:6379
      - CACHING_PASSWORD-redis
      - CACHING_EXPIRATION=2
    image: arturmon/s3stream:latest
    restart: unless-stopped

  test-app-4:
    environment:
      - S3_ACCESS_KEY_ID=app
      - S3_SECRET_ACCESS_KEY=E7ct9Zr1rOu0ZJZLxTqv
      - STORAGE_HOST=postgres
      - SESSION_POSTGRESQL_HOST=postgres
      - S3_ENDPOINT=minio-server:9000
      - MQ_BROKER=rabbit
      - CONSUL_URL=consul:8500
      - LOG_TYPE=gelf
      - LOG_GELF_SERVER_URL=graylog:12201
      - OPEN_TELEMETRY_JAEGER_ENDPOINT=http://jaeger:4318
      - CACHING_ENABLED=true
      - CACHING_ADDRESS=caching:6379
      - CACHING_PASSWORD-redis
      - CACHING_EXPIRATION=2
    image: arturmon/s3stream:latest
    restart: unless-stopped

  haproxy:
    image: haproxytech/haproxy-alpine:2.9.5
    restart: unless-stopped
    depends_on:
      - jaeger
    ports:
      - "8404:8404"
      - "80:80"
      - "8081:8081"
    volumes:
      - ./infra/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

  mongo:
    image: mongo:5.0.13
    restart: unless-stopped


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    restart: unless-stopped
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g

  graylog:
    image: graylog/graylog:5.0
    environment:
    # CHANGE ME (must be at least 16 characters)!
    - GRAYLOG_PASSWORD_SECRET=5XglVihdhMA2zCWf
    # Password: admin
    - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
    - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9100/
    - GRAYLOG_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    - GRAYLOG_MONGODB_URI=mongodb://mongo:27017/graylog
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
    # Graylog web interface and REST API
    - 9100:9000
    # Syslog TCP
    - 1514:1514
    # Syslog UDP
    - 1514:1514/udp
    # GELF TCP
    - 12201:12201
    # GELF UDP
    - 12201:12201/udp


volumes:
  postgresql_data:
    driver: local
  mongodb_data:
    driver: local
  prom_data:
