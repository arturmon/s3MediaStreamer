basePath: /v1
definitions:
  config.Album:
    properties:
      _id:
        type: string
      artist:
        type: string
      code:
        type: string
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      price:
        type: number
      title:
        type: string
      updated_at:
        type: string
    type: object
  config.User:
    properties:
      _id:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  gin.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  gin.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  monitoring.HealthResponse:
    properties:
      status:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Sceleton Golang Application API
  version: "1.0"
paths:
  /album/update:
    post:
      consumes:
      - application/json
      description: updates an existing album with new data based on the ID parameter
        sent by the client.
      parameters:
      - description: Code
        in: path
        name: code
        required: true
        type: string
      - description: Updated album details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/config.Album'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Album'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Updates an existing album with new data.
      tags:
      - album-controller
  /albums:
    delete:
      consumes:
      - '*/*'
      description: Delete ALL.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Complete removal of all albums.
      tags:
      - album-controller
    get:
      consumes:
      - '*/*'
      description: responds with the list of all albums as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/config.Album'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Show the list of all albums.
      tags:
      - album-controller
  /albums/:code:
    delete:
      consumes:
      - '*/*'
      description: locates the album whose ID value matches the id parameter and deletes
        it.
      parameters:
      - description: Code album
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Deletes album whose ID value matches the code.
      tags:
      - album-controller
    get:
      consumes:
      - '*/*'
      description: locates the album whose ID value matches the id parameter sent
        by the client, then returns that album as a response.
      parameters:
      - description: Code album
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Album'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Album whose ID value matches the id.
      tags:
      - album-controller
    post:
      consumes:
      - application/json
      description: adds an album from JSON received in the request body.
      parameters:
      - description: Code
        in: path
        name: code
        required: true
        type: string
      - description: Album details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/config.Album'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/config.Album'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Adds an album from JSON.
      tags:
      - album-controller
  /health:
    get:
      consumes:
      - '*/*'
      description: Checks and returns the current health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/monitoring.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/monitoring.HealthResponse'
      summary: Get health status of the application
      tags:
      - health-controller
  /ping:
    get:
      consumes:
      - '*/*'
      description: Check if the application server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Application liveness check function
      tags:
      - health-check
  /user:
    get:
      consumes:
      - '*/*'
      description: Retrieves user information based on JWT in the request's cookies
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/gin.UserResponse'
        "401":
          description: Unauthenticated
          schema:
            $ref: '#/definitions/gin.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/gin.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user information
      tags:
      - user-controller
  /users/delete:
    delete:
      consumes:
      - '*/*'
      description: Deletes the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Success - User deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - User unauthenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found - User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Deletes a user.
      tags:
      - user-controller
  /users/login:
    post:
      consumes:
      - '*/*'
      description: Authenticates a user with provided email and password.
      parameters:
      - description: Login User
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/config.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request - Incorrect Password
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found - User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticates a user.
      tags:
      - user-controller
  /users/logout:
    post:
      consumes:
      - '*/*'
      description: Clears the authentication cookie, logging out the user.
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Logs out a user.
      tags:
      - user-controller
  /users/register:
    post:
      consumes:
      - '*/*'
      description: Register a new user with provided name, email, and password.
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/config.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/config.User'
        "400":
          description: Bad Request - User with this email exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Registers a new user.
      tags:
      - user-controller
swagger: "2.0"
