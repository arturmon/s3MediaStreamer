basePath: /v1
definitions:
  model.Album:
    properties:
      artist:
        example: Artist name
        type: string
      code:
        example: I001
        type: string
      description:
        example: A short description of the application
        type: string
      price:
        example: '{Number: 1.10, Currency: EUR}'
        type: string
      sender:
        example: amqp or rest
        type: string
      title:
        example: Title name
        type: string
    type: object
  model.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  model.OTPInput:
    properties:
      token:
        type: string
      user_id:
        type: string
    type: object
  model.OkGenerateOTP:
    properties:
      base32: {}
      otpauth_url: {}
    type: object
  model.OkLoginResponce:
    properties:
      email:
        type: string
      otp_enabled:
        type: boolean
      refresh_token:
        type: string
      role:
        type: string
    type: object
  model.OkResponse:
    properties:
      message:
        type: string
    type: object
  model.ParamsRefreshTocken:
    properties:
      refresh_token:
        example: eyJhbGciOiJIU....FnjPC-zct_EDkIuUviRNI
        type: string
    type: object
  model.ResponceRefreshTocken:
    properties:
      access_token:
        example: eyJhbGciOiJIU....FnjPC-zct_EDkIuUviRNI
        type: string
      refresh_token:
        example: eyJhbGciOiJIU....FnjPC-zct_EDkIuUviRNI
        type: string
    type: object
  model.User:
    description: 'User account information with: user _id, name, email, password'
    properties:
      email:
        example: aaaa@aaaa.com
        type: string
      otp_auth_url:
        type: string
      otp_enabled:
        type: boolean
      otp_secret:
        type: string
      otp_verified:
        type: boolean
      password:
        example: "1111"
        type: string
    type: object
  model.UserResponse:
    properties:
      email:
        type: string
      name:
        type: string
      refresh_token:
        type: string
    type: object
  monitoring.HealthResponse:
    properties:
      status:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:10000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Sceleton Golang Application API
  version: 0.0.1
paths:
  /albums:
    get:
      consumes:
      - '*/*'
      description: responds with the list of all albums as JSON.
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        required: true
        type: integer
      - description: Field to sort by (e.g., 'created_at')
        in: query
        name: sort_by
        type: string
      - description: Sort order ('asc' or 'desc')
        in: query
        name: sort_order
        type: string
      - description: Filter criteria
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Album'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show the list of all albums.
      tags:
      - album-controller
  /albums/{code}:
    get:
      consumes:
      - '*/*'
      description: |-
        locates the album whose ID value matches the id parameter sent by the client,
        then returns that album as a response.
      parameters:
      - description: Code album
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Album'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Album whose ID value matches the id.
      tags:
      - album-controller
  /albums/add:
    post:
      consumes:
      - application/json
      description: adds an album from JSON received in the request body.
      parameters:
      - description: Album details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Album'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Album'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Adds an album from JSON.
      tags:
      - album-controller
  /albums/delete/{code}:
    delete:
      consumes:
      - '*/*'
      description: locates the album whose ID value matches the id parameter and deletes
        it.
      parameters:
      - description: Code album
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Deletes album whose ID value matches the code.
      tags:
      - album-controller
  /albums/deleteAll:
    delete:
      consumes:
      - '*/*'
      description: Delete ALL.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Complete removal of all albums.
      tags:
      - album-controller
  /albums/update:
    post:
      consumes:
      - application/json
      description: updates an existing album with new data based on the ID parameter
        sent by the client.
      parameters:
      - description: Updated album details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Album'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Album'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Updates an existing album with new data.
      tags:
      - album-controller
  /health:
    get:
      consumes:
      - '*/*'
      description: Checks and returns the current health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/monitoring.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/monitoring.HealthResponse'
      summary: Get health status of the application
      tags:
      - health-controller
  /otp/disable:
    post:
      consumes:
      - application/json
      description: Disable OTP for a user by setting 'otp_enabled' to 'false' in the
        database.
      parameters:
      - description: OTP input data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.OTPInput'
      produces:
      - application/json
      responses:
        "200":
          description: OTP disabled successfully
          schema:
            $ref: '#/definitions/model.OkLoginResponce'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Failed to update OTP status
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Disable OTP for a user.
      tags:
      - OTP
  /otp/generate:
    post:
      consumes:
      - application/json
      description: Generate an OTP token for a user and store it in the database.
      parameters:
      - description: OTP input data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.OTPInput'
      produces:
      - application/json
      responses:
        "200":
          description: OTP generated successfully
          schema:
            $ref: '#/definitions/model.OkGenerateOTP'
        "400":
          description: Invalid refresh payload
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Failed to find user or invalid email/password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Failed to update OTP secret or URL
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Generate OTP for a user.
      tags:
      - OTP
  /otp/validate:
    post:
      consumes:
      - application/json
      description: Validates a One-Time Password (OTP) for a user.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: OTP Input
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.OTPInput'
      produces:
      - application/json
      responses:
        "200":
          description: OTP Valid
          schema:
            $ref: '#/definitions/model.OkResponse'
        "400":
          description: Bad Request - Invalid OTP
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Validates a One-Time Password (OTP).
      tags:
      - OTP
  /otp/verify:
    post:
      consumes:
      - application/json
      description: Verify the OTP token for a user and update 'otp_enabled' and 'otp_verified'
        fields in the database.
      parameters:
      - description: OTP input data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.OTPInput'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/model.OkLoginResponce'
        "400":
          description: Invalid token
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Failed to update OTP status
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Verify OTP for a user.
      tags:
      - OTP
  /ping:
    get:
      consumes:
      - '*/*'
      description: Check if the application server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Application liveness check function
      tags:
      - health-controller
  /users/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Success - User deleted
          schema:
            type: string
        "401":
          description: Unauthorized - User unauthenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Deletes a user.
      tags:
      - user-controller
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with provided email and password.
      parameters:
      - description: Login User
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.OkLoginResponce'
        "400":
          description: Bad Request - Incorrect Password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authenticates a user.
      tags:
      - user-controller
  /users/logout:
    post:
      consumes:
      - application/json
      description: Clears the authentication cookie, logging out the user.
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logs out a user.
      tags:
      - user-controller
  /users/me:
    get:
      consumes:
      - '*/*'
      description: Retrieves user information based on JWT in the request's cookies
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.OkLoginResponce'
        "401":
          description: Unauthenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user information
      tags:
      - user-controller
  /users/refresh:
    post:
      consumes:
      - application/json
      description: Validates the provided refresh token, generates a new access token,
        and returns it.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/model.ParamsRefreshTocken'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed access token
          schema:
            $ref: '#/definitions/model.ResponceRefreshTocken'
        "400":
          description: Bad Request - Invalid refresh token
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized - Invalid refresh token
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Refreshes the access token using a valid refresh token.
      tags:
      - user-controller
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with provided name, email, and password.
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request - User with this email exists
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Registers a new user.
      tags:
      - user-controller
schemes:
- http
- https
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
